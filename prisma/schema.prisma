// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String        @id @default(cuid())
  name           String
  document       String?       @unique
  email          String        @unique
  emailVerified  DateTime?
  hashedPassword String?
  role           Role          @default(VOTER)
  accounts       Account[]
  ballots        Ballot[]
  certificates   Certificate[]
  elections      Election[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  VOTER
}

model Election {
  id           String        @id @default(cuid())
  name         String
  description  String
  startTime    DateTime
  endTime      DateTime
  positions    Position[]
  ballots      Ballot[]
  certificates Certificate[]
  voters       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Position {
  id         String      @id @default(cuid())
  name       String
  election   Election    @relation(fields: [electionId], references: [id], onDelete: Cascade)
  electionId String
  candidates Candidate[]
  ballots    Ballot[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Party {
  id         String      @id @default(cuid())
  name       String
  imageKey   String?
  imageUrl   String?
  candidates Candidate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Candidate {
  id         String   @id @default(cuid())
  name       String
  email      String?
  document   String?
  imageKey   String?
  imageUrl   String?
  proposals  String?
  party      Party    @relation(fields: [partyId], references: [id], onDelete: Cascade)
  partyId    String
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)
  positionId String
  ballots    Ballot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ballot {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId String
  position    Position  @relation(fields: [positionId], references: [id], onDelete: Cascade)
  positionId  String
  election    Election  @relation(fields: [electionId], references: [id], onDelete: Cascade)
  electionId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, positionId, electionId])
}

model Certificate {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  election   Election @relation(fields: [electionId], references: [id], onDelete: Cascade)
  electionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
