// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  VOTER
}

enum CandidateType {
  PRIMARY
  SECONDARY
}

enum Action {
  CREATE
  UPDATE
  DELETE
}

enum EntityType {
  USER
  ELECTION
  POSITION
  PARTY
  CANDIDATE
  BALLOT
  CERTIFICATE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String    @id @default(cuid())
  name                String
  document            String    @unique
  email               String    @unique
  emailVerified       DateTime?
  role                Role      @default(VOTER)
  hashedPassword      String
  needsPasswordChange Boolean   @default(true)

  accounts Account[]
  sessions Session[]

  certificates Certificate[]
  elections    Election[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Election {
  id          String   @id @default(cuid())
  name        String
  description String
  startsAt    DateTime
  endsAt      DateTime
  isCompleted Boolean  @default(false)

  positions    Position[]
  voters       User[]
  ballots      Ballot[]
  certificates Certificate[]
  report       ElectionReport?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("elections")
}

model ElectionReport {
  id     String @id @default(cuid())
  report Json

  electionId String   @unique
  election   Election @relation(fields: [electionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("election_reports")
}

model Position {
  id   String @id @default(cuid())
  name String

  electionId String
  election   Election @relation(fields: [electionId], references: [id])

  parties Party[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Party {
  id        String  @id @default(cuid())
  name      String
  imageKey  String?
  imageUrl  String?
  proposals Json[]

  positionId String
  position   Position @relation(fields: [positionId], references: [id])

  candidates Candidate[]
  ballots    Ballot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("parties")
}

model Candidate {
  id       String        @id @default(cuid())
  name     String
  email    String        @unique
  document String        @unique
  imageKey String?
  imageUrl String?
  type     CandidateType

  party   Party  @relation(fields: [partyId], references: [id])
  partyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([partyId, type])
  @@map("candidates")
}

model Ballot {
  id String @id @default(cuid())

  election   Election @relation(fields: [electionId], references: [id])
  electionId String

  party   Party?  @relation(fields: [partyId], references: [id])
  partyId String?

  isNull Boolean @default(false)

  @@map("ballots")
}

model Certificate {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  election   Election @relation(fields: [electionId], references: [id])
  electionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("certificates")
}

model AuditLog {
  id         String     @id @default(cuid())
  action     Action
  entityId   String
  entityType EntityType
  entityName String?
  userId     String?
  userEmail  String?
  userRole   Role?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("audit_logs")
}
